@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject Blazored.Toast.Services.IToastService ToastService

@* <button class="btn btn-primary" @onclick="() => ToastService.ShowSuccess(" It works !", "Success" )">
    Test the toast
</button> *@

<PageTitle>OutZen - Home</PageTitle>

<h2>Welcome to the</h2>

<div class="scroll-container">

    <!-- Intro -->
    <section class="intro-section">
        <h1>Welcome to <span class="highlight">OutZen</span></h1>
        <p>Track real-time traffic, weather, and crowd flow, and receive smart suggestions.</p>
    </section>

    <!-- Map -->
    <section class="leaflet-section">
        <h2>Interactive map</h2>
        <div id="map" class="map-container"></div>
    </section>

    <!-- Simulator + Graph -->
    <section class="simulator-section">
        <h2>Real-time traffic</h2>
        <canvas id="crowdChart"></canvas>
        <button class="cta-button" @onclick="SimulateCrowdChange">Simulate crowds</button>
    </section>

    <!-- Weather & Traffic & Suggestions -->
    <section class="info-section">
        <h2>Real-time information & suggestions</h2>
        <div class="info-grid">
            <div class="info-box">
                <h3>Weather</h3>
                <pre>@WeatherInfo</pre>
            </div>
            <div class="info-box">
                <h3>Traffic</h3>
                <pre>@TrafficInfo</pre>
            </div>
            <div class="info-box">
                <h3>Suggestion</h3>
                <p><strong>@SuggestionMessage</strong></p>
            </div>
        </div>
    </section>

</div>
<p><strong>🚦 Info Trafic :</strong> @TrafficInfo</p>

<!-- Background SVG + Animated Canvas -->
<div class="svg-background">
    <svg id="animated-svg" viewBox="0 0 800 600" preserveAspectRatio="xMidYMid slice">
        <defs>
            <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop id="stop1" offset="0%" stop-color="#00fff7" />
                <stop id="stop2" offset="100%" stop-color="#ff00ff" />
            </linearGradient>
        </defs>
        <rect width="800" height="600" fill="url(#gradient)">
            <animateTransform attributeName="transform" type="rotate" from="0 400 300" to="360 400 300" dur="60s" repeatCount="indefinite" />
        </rect>
    </svg>
</div>

<div class="orbit">
    <div class="figurine"></div>
</div>

<!-- Canvas must be after DOM content -->
<canvas id="geometryCanvas" width="800" height="400" style="width:100%; max-width:800px; background: #111;"></canvas>

@code {
    private HubConnection hubConnection;
    private string WeatherInfo = "Loading weather...";
    private string TrafficInfo = "Loading traffic...";
    private string SuggestionMessage = "Waiting for data...";
    private readonly List<int> crowdData = new();
    private readonly List<string> timeLabels = new();
    private IJSObjectReference? module;
    private IJSObjectReference? canvasModule;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        try
        {
            // JS & DOM loading
            await JS.InvokeVoidAsync("initializeLeafletMap");
            await JS.InvokeVoidAsync("initializeMap", "map");

            var module = await JS.InvokeAsync<IJSObjectReference>(
                "import",
                "./js/crowdChart.js",
                "./js/layoutCanvas.js"
            );
            await module.InvokeVoidAsync(
                "initCrowdChart",
                "startBackgroundCanvas"
            );

            canvasModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/geometryCanvas.js");
            await canvasModule.InvokeVoidAsync("initGeometryCanvas");

            // Weather/traffic initialization
            WeatherInfo = await JS.InvokeAsync<string>("getOpenWeatherInfo");
            TrafficInfo = await JS.InvokeAsync<string>("getWazeTrafficInfo");

            // Animated canvas
            await JS.InvokeVoidAsync("GeometryCanvas.init");

            // SignalR interop (client JS)
            await JS.InvokeVoidAsync("signalrInterop.startConnection", "/crowdHub");

            // Hub .NET → listener C#
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/hubs/eventHub"))
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string>("UpdateCrowdLevel", HandleCrowdUpdate);
            await hubConnection.StartAsync();

            ComputeSuggestion();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ JS or SignalR error: {ex.Message}");
            Console.WriteLine($"❌ JS error in MainLayout: {ex.Message}");
        }
    }

    private async Task HandleCrowdUpdate(string levelStr)
    {
        await JS.InvokeVoidAsync("updateCrowdChart", levelStr);
        crowdData.Add(int.TryParse(levelStr, out int val) ? val : 0);
        timeLabels.Add(DateTime.Now.ToString("HH:mm:ss"));

        WeatherInfo = await JS.InvokeAsync<string>("getOpenWeatherInfo");
        TrafficInfo = await JS.InvokeAsync<string>("getWazeTrafficInfo");

        ComputeSuggestion();
        StateHasChanged();
    }

    private void ComputeSuggestion()
    {
        var crowd = crowdData.LastOrDefault();

        if (crowd < 30 && WeatherInfo.Contains("Sunny") && TrafficInfo.Contains("Fluid"))
            SuggestionMessage = "Perfect for a quiet stroll!";
        else if (crowd < 60)
            SuggestionMessage = "Bonne sortie, mais soyez pragmatique pour le trafic.";
        else
            SuggestionMessage = "Have a good outing, but be pragmatic about traffic.";
    }

    private async Task SimulateCrowdChange()
    {
        var newLevel = new[] { "Weak", "Moderate", "High", "Critical" }[new Random().Next(0, 4)];
        await hubConnection.SendAsync("BroadcastCrowdLevel", newLevel);
    }
    private void HandleTrafficUpdate(string newInfo)
    {
        TrafficInfo = newInfo;
        InvokeAsync(StateHasChanged);
    }
    // public void Dispose()
    // {
    //     TrafficConditionService.OnTrafficInfoUpdated -= HandleTrafficUpdate;
    // }
}


































































    @* // Copyrigtht (c) 2025 Citizen Hackathon https://github.com/POLLESSI/Citizenhackathon2025V3.Blazor.Client. All rights reserved. *@