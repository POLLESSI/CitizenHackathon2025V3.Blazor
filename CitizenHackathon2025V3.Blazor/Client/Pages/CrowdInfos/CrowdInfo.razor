@page "/crowdinfo"
@using CitizenHackathon2025V3.Blazor.Client.Common.SignalR
@using CitizenHackathon2025V3.Blazor.Client.Models
@inherits SignalRComponentBase<CrowdInfoModel>
@inject IJSRuntime JS

<h3>Crowd Information</h3>

@if (IsLoading)
{
    <p>Chargement...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger">@ErrorMessage</p>
}
else
{
    <div class="table-wrapper" @ref="ScrollContainerRef" @onscroll="HandleScroll"
         style="height: 300px; overflow-y: auto; border: 1px solid #444;">
        <table class="table table-striped table-dark">
            <thead>
                <tr>
                    <th>LocationName</th>
                    <th>Crowd Level</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var info in VisibleItems)
                {
                    <tr>
                        <td>@info.LocationName</td>
                        <td>@info.CrowdLevel</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<CrowdInfoModel> visibleCrowdInfos = new();
    private int batchSize = 10;
    private int currentIndex = 0;
    private ElementReference ScrollContainerRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadMoreItems();
        }
    }

    private void LoadMoreItems()
    {
        var nextBatch = Items.Skip(currentIndex).Take(batchSize);
        visibleCrowdInfos.AddRange(nextBatch);
        currentIndex += batchSize;
        StateHasChanged();
    }

    private async Task HandleScroll()
    {
        var scrollTop = await JS.InvokeAsync<int>("getScrollTop", ScrollContainerRef);
        var scrollHeight = await JS.InvokeAsync<int>("getScrollHeight", ScrollContainerRef);
        var clientHeight = await JS.InvokeAsync<int>("getClientHeight", ScrollContainerRef);

        if (scrollTop + clientHeight >= scrollHeight - 5 && currentIndex < Items.Count)
        {
            LoadMoreItems();
        }
    }
    protected override Task OnNewItemReceived(CrowdInfoModel model)
    {
        Console.WriteLine($"🆕 New item: {model.LocationName}");
        visibleCrowdInfos.Insert(0, model);
        StateHasChanged();
        return Task.CompletedTask;
    }
}




















































































        @* // Copyrigtht (c) 2025 Citizen Hackathon https://github.com/POLLESSI/Citizenhackathon2025V3.Blazor.Client. All rights reserved. *@